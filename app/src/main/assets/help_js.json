{
  "version": 1,
  "records": [
    {
      "date": "JS里面编解码",
      "records": [
        "说明：JS处理规则支持base64和AES和utf-8、gbk、gb2312编解码",
        "示例：a&&href.js:base64Encode(input)，a&&href.js:base64Decode(input)，a&&href.js:aesDecode('key', input)，a&&href.js:aesEncode('key', input)",
        "示例：a&&href.js:decodeStr(input, 'UTF-8')， a&&href.js:encodeStr(input, 'GBK')",
        "‘‘注意’’：使用fetch发起请求不能直接使用该方法对请求后的内容进行解码，因为fetch返回的内容默认会用UTF-8解码，如果response本身不是UTF-8那么就已经乱码了，再次解码不能达到想要的结果，fetch使用方法请看后面“JS里面发起请求”"
      ]
    },
    {
      "date": "JS里面编解码增强",
      "records": [
        "支持JS和插件调用CryptoJS功能，JS规则里面，先eval(getCryptoJS())然后再使用CryptoJS.enc.Utf8.parse(word)等语法，插件里面同样需要eval(request('hiker://files/aes.js'))"
      ]
    },
    {
      "date": "JS里面常用方法",
      "records": [
        "使用规则解析，示例：js:parseDom('<html><body><a href='/'></body></html>', 'body&&a&&href')",
        "使用规则解析获取网页内容，parseDomForHtml，和parseDom功能一致，但是parseDomForHtml不会对结果智能处理自动加上域名和http前缀，完全返回解析到的内容",
        "使用规则解析获取网页内容，parseDomForArray，和parseDomForHtml功能类似，parseDomForHtml是获取一个块的内容，而parseDomForArray是获取列表，返回一个数组对象，示例：parseDomForArray('<body><a href='/'><a href='/'></body>', 'body&&li')，那么返回['<a href='/'>', '<a href='/'>']",
        "获取当前规则，示例：.js:getRule()",
        "获取当前网络请求地址，示例：.js:setError(MY_URL)，将会打印出当前网络请求地址，即MY_URL是一个变量，在执行JS前会注入进去，旧版使用getUrl()方法获取，但是可能不是特别准确",
        "显示内容到界面上或者输出错误信息，示例：.js:setError(getRule())",
        "写入文件writeFile(String filePath, String content)，filePath可以为hiker://files/a.txt或者文件绝对路径，hiker://files/a.txt等效为软件根路径下的Documents文件夹下的a.txt",
        "存储和读取全局变量，示例：.js:putVar('name', '张三');setError(getVar('name'))，获取不到就返回默认值：getVar(\"key\",\"default\")，该变量和插件里面的全局变量是一致的，重启软件后失效，如需长期有效，见文件存取"
      ]
    },
    {
      "date": "JS里面发起请求",
      "records": [
        "示例：fetch('http://www.a.cn', {headers:{'content-type':'application/json'},body:'a=1&b=2',method:'POST'})",
        "编码问题：fetch('http://www.a.cn', {headers:{'content-type':'application/json; charst=GBK'},body:'a=1&b=2',method:'POST'})那么解析返回内容时时会使用GBK来解码，content-type里面没有设置charset默认使用UTF-8",
        "如何获取返回的header：fetch('http://www.a.cn', {headers:{},body:'a=1&b=2',method:'POST',withHeaders:true})，那么返回的内容为'{body:'字符串内容',headers:{'Set-Cookie':['a=b','b=c']}}'，即返回的是个json字符串，注意是字符串，header里面每个key对应一个array",
        "如何获取返回的状态码：fetch('http://www.a.cn', {withStatusCode:true})，那么返回的内容为'{body:'字符串内容',headers:{},statusCode:200}'",
        "支持链接为hiker://files/a.txt的形式",
        "如何禁止重定向：fetch('http://www.a.cn', {redirect:false})",
        "如何引用UA：fetch('http://www.a.cn', {headers:{\"User-Agent\":MOBILE_UA}})，fetch('http://www.a.cn', {headers:{\"User-Agent\":PC_UA}})，当然也可以自定义"
      ]
    },
    {
      "date": "JS里面获取Cookie",
      "records": [
        "示例：fetchCookie('http://www.a.cn', {headers:{'content-type':'application/json'},body:'a=1&b=2',method:'POST'})",
        "和fetch方法类似，返回的是数组的json字符串，如['a=b','c=d']，注意是字符串，该方法适合单独获取cookie的情况，如果需要同时获取响应内容，请用fetch方法，withHeaders:true，详情请看上一条"
      ]
    },
    {
      "date": "JS里面刷新页面",
      "records": [
        "refreshPage()，可以和动态解析、toast://结合，比如@lazyRule=.js:putVar('settingMode', '1')；；refreshPage()；；'toast://已设置为简洁模式'",
        "即可以用js执行一些操作，然后想要立即生效，那就刷新页面，返回'toast://已设置为简洁模式'来提示用户"
      ]
    },
    {
      "date": "JS预处理",
      "records": [
        "方便规则快速获取cookie，在执行首页解析规则和搜索解析规则前都会执行一遍再执行对应规则，注意必须是JS代码，无需js:开头，该代码里面可以使用变量MY_RULE来获取当前规则，注意该变量是一个对象，比如用MY_RULE.find_rule来获取解析规则"
      ]
    },
    {
      "date": "解析规则增强",
      "records": [
        "说明：可以全部用js来代替首页频道解析规则，或者搜索解析规则，那么规则以js:开头",
        "示例：js: var s = getResCode(); var json={}; eval('json=' + s);\n\nvar next=json.nextPageUrl;\nvar s2 = fetch(next,{});\nvar j2={}; eval('j2=' + s2);\nfor(var i=0;i<j2.itemList.length;i++){\njson.itemList.push(j2.itemList[i]);\n}\n\nvar res={};var d=[];for(var i=0;i<json.itemList.length;i++){var j = json.itemList[i]; if(j.type!=\"followCard\")continue;var r = {};r.pic_url=j.data.content.data.cover.feed;r.title = j.data.content.data.title;r.desc=j.data.header.description;r.url='https://www.kaiyanapp.com/detail.html?vid=' + j.data.header.id+'&utm_source=eyepetizer-homepage&utm_medium=internal&utm_campaign=routine';d.push(r);}\nres.data = d;setHomeResult(res);",
        "说明：setHomeResult返回内容为数组对象，格式为[{title:'标题',pic_url:'图片',desc:'描述',url:'链接'}]，（最新版也可以用img表示图片地址）",
        "说明：setSearchResult返回内容为数组对象，格式为[{title:'标题',img:'图片',desc:'描述', content:'详情', url:'链接'}]，（最新版也可以用pic_url表示图片地址）",
        "说明：setHomeResult返回首页结果，setSearchResult返回搜索结果，setError('111')返回报错信息（可用来调试），更多用法请参考现有规则"
      ]
    },
    {
      "date": "参数/header用JS处理",
      "records": [
        "说明：每一个url参数和header值都可以用js处理，比如生成时间戳，header里面的也可以，注意只能对值（value）进行处理，不能对键（key）用js处理",
        "示例：http://www.google.com?q=**.js:decodeStr(input,'GBK');POST;gbk;{User-Agent@Windows&&Timestamp@.js:new Date().getTime()}",
        "示例说明：网页内容会被GBK编码显示，但是url使用utf-8编码（默认会同样被GBK编码，.js:decodeStr(input,'GBK')会再把关键词解码，然后真正请求时会默认使用UTF-8编码）"
      ]
    },
    {
      "date": "url链接用JS处理",
      "records": [
        "说明：之前有url参数js处理，这次还可以对链接本身js处理，如http://a.com.js:input+'/'?a=b.js:input+'a'"
      ]
    },
    {
      "date": "本地文件下载",
      "records": [
        "说明：因为有部分网址播放到一半会无法继续播放，然后就有大佬直接将m3u8文件缓存到本地，然后播放，但是本地m3u8不支持下载，因此可以在本地地址后面加上?url=原地址，这样视界下载前会解析后面的地址，但是不保证这样处理后能正确下载（毕竟都不能正确播放）"
      ]
    }
  ]
}